# helm-release.yaml
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: vpn-gateway
  namespace: networking
spec:
  interval: 1m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: pod-gateway
      version: 5.6.2
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home
        namespace: flux-system
      interval: 1m

  install:
    createNamespace: true
    timeout: 10m
    remediation:
      retries: 3

  upgrade:
    timeout: 10m
    remediation:
      retries: 3
      remediateLastFailure: true
    cleanupOnFail: true

  rollback:
    timeout: 10m
    recreate: true
    cleanupOnFail: true

  # See https://github.com/k8s-at-home/charts/blob/master/charts/pod-gateway/values.yaml
  values:
    image:
      repository: ghcr.io/k8s-at-home/pod-gateway
      tag: v1.6.1

    DNS: 172.16.1.1

    updateStrategy: Recreate

    routed_namespaces:
      - highseas

    # publicPorts:
    #   - hostname: deluge
    #     IP: 10
    #     ports:
    #       - type: tcp
    #         port: ${SECRET_VPN_FORWARD_PORT_1}
    #       - type: udp
    #         port: ${SECRET_VPN_FORWARD_PORT_1}

    settings:
      DNS_LOCAL_CIDRS: ${SECRET_DOMAIN}
      VPN_INTERFACE: wg0
      VPN_BLOCK_OTHER_TRAFFIC: true
      VPN_TRAFFIC_PORT: ${SECRET_VPN_PORT}
      VPN_LOCAL_CIDRS: '172.16.0.0/12 ${SECRET_NETWORK_K8S_CLUSTER_CIDR} ${SECRET_NETWORK_K8S_SERVICE_CIDR} ${SECRET_NETWORK_SERVER_CIDR}'
      NOT_ROUTED_TO_GATEWAY_CIDRS: '172.16.0.0/12 ${SECRET_NETWORK_K8S_CLUSTER_CIDR} ${SECRET_NETWORK_K8S_SERVICE_CIDR} ${SECRET_NETWORK_SERVER_CIDR}'
      VXLAN_GATEWAY_FIRST_DYNAMIC_IP: 20
      VXLAN_ID: 43
      VXLAN_IP_NETWORK: "172.16.1"

    webhook:
      image:
        repository: ghcr.io/k8s-at-home/gateway-admision-controller
        tag: v3.5.0
        pullPolicy: IfNotPresent
      replicas: 1
      strategy:
        type: RollingUpdate
      gatewayDefault: false
      gatewayLabel: setGateway
      gatewayAnnotation: setGateway
      namespaceSelector:
        label: "vpn-routed-gateway"

    persistence:
      data:
        enabled: true
        existingClaim: pod-gateway-config

    addons:
      vpn:
        enabled: true
        type: wireguard

        wireguard:
          image:
            repository: ghcr.io/k8s-at-home/wireguard
            tag: v1.0.20210914
            pullPolicy: IfNotPresent

          securityContext:
            runAsUser: 568
            runAsGroup: 568
            capabilities:
              drop:
                - "SYS_MODULE"

        env:
          TZ: ${TIMEZONE}
          IPTABLES_BACKEND: nft
          KILLSWITCH: "false"

        configFile: |-
            [Interface]
            PrivateKey = ${SECRET_VPN_INTERFACE_PRIVATE_KEY}
            Address = ${SECRET_VPN_INTERFACE_ADDRESS}
            DNS = 1.1.1.1
            [Peer]
            PublicKey = ${SECRET_VPN_PEER_PUBLIC_KEY}
            AllowedIPs = 0.0.0.0/0, ::/0
            Endpoint = ${SECRET_VPN_PEER_ENDPOINT}
            PersistentKeepalive = 25

        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            memory: 512Mi

        livenessProbe:
          exec:
            command:
              - sh
              - -c
              - if [ $(curl -s https://ipinfo.io/region) = '${SECRET_VPN_REGION}' ]; then exit 0; else exit $?; fi
          initialDelaySeconds: 45
          periodSeconds: 120
          failureThreshold: 1

        additionalVolumes:
          - name: data
            persistentVolumeClaim:
              claimName: pod-gateway-data

        networkPolicy:
          enabled: true

          egress:
            - to:
                - ipBlock:
                    cidr: 0.0.0.0/0
            - to:
                - ipBlock:
                    cidr: 172.16.0.0/12
                - ipBlock:
                    cidr: ${SECRET_NETWORK_K8S_CLUSTER_CIDR}
                - ipBlock:
                    cidr: ${SECRET_NETWORK_K8S_SERVICE_CIDR}
                - ipBlock:
                    cidr: ${SECRET_NETWORK_SERVER_CIDR}
